#compdef _skaffold skaffold


function _skaffold {
  local -a commands

  _arguments -C \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "build:Build the artifacts"
      "completion:Output shell completion for the given shell (bash or zsh)"
      "config:Interact with the Skaffold configuration"
      "credits:Export third party notices to given path (./skaffold-credits by default)"
      "debug:[beta] Run a pipeline in debug mode"
      "delete:Delete the deployed application"
      "deploy:Deploy pre-built artifacts"
      "dev:Run a pipeline in development mode"
      "diagnose:Run a diagnostic on Skaffold"
      "fix:Update old configuration to a newer schema version"
      "help:Help about any command"
      "init:[alpha] Generate configuration for deploying an application"
      "options:"
      "render:[alpha] Perform all image builds, and output rendered Kubernetes manifests"
      "run:Run a pipeline"
      "schema:List and print json schemas used to validate skaffold.yaml configuration"
      "survey:Show Skaffold survey url"
      "version:Print the version information"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  build)
    _skaffold_build
    ;;
  completion)
    _skaffold_completion
    ;;
  config)
    _skaffold_config
    ;;
  credits)
    _skaffold_credits
    ;;
  debug)
    _skaffold_debug
    ;;
  delete)
    _skaffold_delete
    ;;
  deploy)
    _skaffold_deploy
    ;;
  dev)
    _skaffold_dev
    ;;
  diagnose)
    _skaffold_diagnose
    ;;
  fix)
    _skaffold_fix
    ;;
  help)
    _skaffold_help
    ;;
  init)
    _skaffold_init
    ;;
  options)
    _skaffold_options
    ;;
  render)
    _skaffold_render
    ;;
  run)
    _skaffold_run
    ;;
  schema)
    _skaffold_schema
    ;;
  survey)
    _skaffold_survey
    ;;
  version)
    _skaffold_version
    ;;
  esac
}

function _skaffold_build {
  _arguments \
    '(*-b *--build-image)'{\*-b,\*--build-image}'[Choose which artifacts to build. Artifacts with image names that contain the expression will be built only. Default is to build sources for all artifacts]:' \
    '--cache-artifacts[Set to false to disable default caching of artifacts]' \
    '--cache-file[Specify the location of the cache file (default $HOME/.skaffold/cache)]:' \
    '(-c --config)'{-c,--config}'[File for global configurations (defaults to $HOME/.skaffold/config)]:' \
    '(-d --default-repo)'{-d,--default-repo}'[Default repository value (overrides global config)]:' \
    '--dry-run[Don'\''t build images, just compute the tag for each artifact.]' \
    '--enable-rpc[Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)]' \
    '--file-output[Filename to write build images to]:' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '*--insecure-registry[Target registries for built images which are not secure]:' \
    '--kube-context[Deploy to this Kubernetes context]:' \
    '--kubeconfig[Path to the kubeconfig file to use for CLI requests.]:' \
    '(-n --namespace)'{-n,--namespace}'[Run deployments in the specified namespace]:' \
    '(-o --output)'{-o,--output}'[Used in conjunction with --quiet flag. Format output with go-template. For full struct documentation, see https://godoc.org/github.com/GoogleContainerTools/skaffold/cmd/skaffold/app/flags#BuildOutput]:' \
    '(*-p *--profile)'{\*-p,\*--profile}'[Activate profiles by name (prefixed with `-` to disable a profile)]:' \
    '--profile-auto-activation[Set to false to disable profile auto activation]' \
    '(-q --quiet)'{-q,--quiet}'[Suppress the build output and print image built on success. See --output to format output.]' \
    '--rpc-http-port[tcp port to expose event REST API over HTTP]:' \
    '--rpc-port[tcp port to expose event API]:' \
    '--skip-tests[Whether to skip the tests after building]' \
    '(-t --tag)'{-t,--tag}'[The optional custom tag to use for images which overrides the current Tagger configuration]:' \
    '--toot[Emit a terminal beep after the deploy is complete]' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_completion {
  _arguments \
    '(-h --help)'{-h,--help}'[help for completion]' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:' \
    '1: :("bash" "zsh")'
}


function _skaffold_config {
  local -a commands

  _arguments -C \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "list:List all values set in the global Skaffold config"
      "set:Set a value in the global Skaffold config"
      "unset:Unset a value in the global Skaffold config"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  list)
    _skaffold_config_list
    ;;
  set)
    _skaffold_config_set
    ;;
  unset)
    _skaffold_config_unset
    ;;
  esac
}

function _skaffold_config_list {
  _arguments \
    '(-a --all)'{-a,--all}'[Show values for all kubecontexts]' \
    '(-c --config)'{-c,--config}'[Path to Skaffold config]:' \
    '(-k --kube-context)'{-k,--kube-context}'[Kubectl context to set values against]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_config_set {
  _arguments \
    '(-c --config)'{-c,--config}'[Path to Skaffold config]:' \
    '(-g --global)'{-g,--global}'[Set value for global config]' \
    '(-k --kube-context)'{-k,--kube-context}'[Kubectl context to set values against]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_config_unset {
  _arguments \
    '(-c --config)'{-c,--config}'[Path to Skaffold config]:' \
    '(-g --global)'{-g,--global}'[Set value for global config]' \
    '(-k --kube-context)'{-k,--kube-context}'[Kubectl context to set values against]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_credits {
  _arguments \
    '(-d --dir)'{-d,--dir}'[destination directory to place third party licenses]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_debug {
  _arguments \
    '--cache-artifacts[Set to false to disable default caching of artifacts]' \
    '--cache-file[Specify the location of the cache file (default $HOME/.skaffold/cache)]:' \
    '--cleanup[Delete deployments after dev or debug mode is interrupted]' \
    '(-c --config)'{-c,--config}'[File for global configurations (defaults to $HOME/.skaffold/config)]:' \
    '(-d --default-repo)'{-d,--default-repo}'[Default repository value (overrides global config)]:' \
    '--enable-rpc[Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)]' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '--force[Recreate Kubernetes resources if necessary for deployment, warning: might cause downtime! (true by default for `skaffold dev`)]' \
    '*--insecure-registry[Target registries for built images which are not secure]:' \
    '--kube-context[Deploy to this Kubernetes context]:' \
    '--kubeconfig[Path to the kubeconfig file to use for CLI requests.]:' \
    '(*-l *--label)'{\*-l,\*--label}'[Add custom labels to deployed objects. Set multiple times for multiple labels]:' \
    '(-n --namespace)'{-n,--namespace}'[Run deployments in the specified namespace]:' \
    '--no-prune[Skip removing images and containers built by Skaffold]' \
    '--no-prune-children[Skip removing layers reused by Skaffold]' \
    '--port-forward[Port-forward exposed container ports within pods]' \
    '(*-p *--profile)'{\*-p,\*--profile}'[Activate profiles by name (prefixed with `-` to disable a profile)]:' \
    '--profile-auto-activation[Set to false to disable profile auto activation]' \
    '--rpc-http-port[tcp port to expose event REST API over HTTP]:' \
    '--rpc-port[tcp port to expose event API]:' \
    '--skip-tests[Whether to skip the tests after building]' \
    '--status-check[Wait for deployed resources to stabilize]' \
    '(-t --tag)'{-t,--tag}'[The optional custom tag to use for images which overrides the current Tagger configuration]:' \
    '--tail[Stream logs from deployed objects (true by default for `skaffold dev` and `skaffold debug`)]' \
    '--toot[Emit a terminal beep after the deploy is complete]' \
    '--trigger[How is change detection triggered? (polling, notify, or manual)]:' \
    '(*-w *--watch-image)'{\*-w,\*--watch-image}'[Choose which artifacts to watch. Artifacts with image names that contain the expression will be watched only. Default is to watch sources for all artifacts]:' \
    '(-i --watch-poll-interval)'{-i,--watch-poll-interval}'[Interval (in ms) between two checks for file changes]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_delete {
  _arguments \
    '(-c --config)'{-c,--config}'[File for global configurations (defaults to $HOME/.skaffold/config)]:' \
    '(-d --default-repo)'{-d,--default-repo}'[Default repository value (overrides global config)]:' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '--kube-context[Deploy to this Kubernetes context]:' \
    '--kubeconfig[Path to the kubeconfig file to use for CLI requests.]:' \
    '(-n --namespace)'{-n,--namespace}'[Run deployments in the specified namespace]:' \
    '(*-p *--profile)'{\*-p,\*--profile}'[Activate profiles by name (prefixed with `-` to disable a profile)]:' \
    '--profile-auto-activation[Set to false to disable profile auto activation]' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_deploy {
  _arguments \
    '(-a --build-artifacts)'{-a,--build-artifacts}'[File containing build result from a previous '\''skaffold build --file-output'\'']:' \
    '(-c --config)'{-c,--config}'[File for global configurations (defaults to $HOME/.skaffold/config)]:' \
    '(-d --default-repo)'{-d,--default-repo}'[Default repository value (overrides global config)]:' \
    '--enable-rpc[Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)]' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '--force[Recreate Kubernetes resources if necessary for deployment, warning: might cause downtime! (true by default for `skaffold dev`)]' \
    '(-i --images)'{-i,--images}'[A list of pre-built images to deploy]:' \
    '--kube-context[Deploy to this Kubernetes context]:' \
    '--kubeconfig[Path to the kubeconfig file to use for CLI requests.]:' \
    '(*-l *--label)'{\*-l,\*--label}'[Add custom labels to deployed objects. Set multiple times for multiple labels]:' \
    '(-n --namespace)'{-n,--namespace}'[Run deployments in the specified namespace]:' \
    '--port-forward[Port-forward exposed container ports within pods]' \
    '(*-p *--profile)'{\*-p,\*--profile}'[Activate profiles by name (prefixed with `-` to disable a profile)]:' \
    '--profile-auto-activation[Set to false to disable profile auto activation]' \
    '--rpc-http-port[tcp port to expose event REST API over HTTP]:' \
    '--rpc-port[tcp port to expose event API]:' \
    '--skip-render[Don'\''t render the manifests, just deploy them]' \
    '--status-check[Wait for deployed resources to stabilize]' \
    '--tail[Stream logs from deployed objects (true by default for `skaffold dev` and `skaffold debug`)]' \
    '--toot[Emit a terminal beep after the deploy is complete]' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_dev {
  _arguments \
    '--cache-artifacts[Set to false to disable default caching of artifacts]' \
    '--cache-file[Specify the location of the cache file (default $HOME/.skaffold/cache)]:' \
    '--cleanup[Delete deployments after dev or debug mode is interrupted]' \
    '(-c --config)'{-c,--config}'[File for global configurations (defaults to $HOME/.skaffold/config)]:' \
    '(-d --default-repo)'{-d,--default-repo}'[Default repository value (overrides global config)]:' \
    '--enable-rpc[Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)]' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '--force[Recreate Kubernetes resources if necessary for deployment, warning: might cause downtime! (true by default for `skaffold dev`)]' \
    '*--insecure-registry[Target registries for built images which are not secure]:' \
    '--kube-context[Deploy to this Kubernetes context]:' \
    '--kubeconfig[Path to the kubeconfig file to use for CLI requests.]:' \
    '(*-l *--label)'{\*-l,\*--label}'[Add custom labels to deployed objects. Set multiple times for multiple labels]:' \
    '(-n --namespace)'{-n,--namespace}'[Run deployments in the specified namespace]:' \
    '--no-prune[Skip removing images and containers built by Skaffold]' \
    '--no-prune-children[Skip removing layers reused by Skaffold]' \
    '--port-forward[Port-forward exposed container ports within pods]' \
    '(*-p *--profile)'{\*-p,\*--profile}'[Activate profiles by name (prefixed with `-` to disable a profile)]:' \
    '--profile-auto-activation[Set to false to disable profile auto activation]' \
    '--render-only[Print rendered Kubernetes manifests instead of deploying them]' \
    '--rpc-http-port[tcp port to expose event REST API over HTTP]:' \
    '--rpc-port[tcp port to expose event API]:' \
    '--skip-tests[Whether to skip the tests after building]' \
    '--status-check[Wait for deployed resources to stabilize]' \
    '(-t --tag)'{-t,--tag}'[The optional custom tag to use for images which overrides the current Tagger configuration]:' \
    '--tail[Stream logs from deployed objects (true by default for `skaffold dev` and `skaffold debug`)]' \
    '--toot[Emit a terminal beep after the deploy is complete]' \
    '--trigger[How is change detection triggered? (polling, notify, or manual)]:' \
    '(*-w *--watch-image)'{\*-w,\*--watch-image}'[Choose which artifacts to watch. Artifacts with image names that contain the expression will be watched only. Default is to watch sources for all artifacts]:' \
    '(-i --watch-poll-interval)'{-i,--watch-poll-interval}'[Interval (in ms) between two checks for file changes]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_diagnose {
  _arguments \
    '(-c --config)'{-c,--config}'[File for global configurations (defaults to $HOME/.skaffold/config)]:' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '(*-p *--profile)'{\*-p,\*--profile}'[Activate profiles by name (prefixed with `-` to disable a profile)]:' \
    '--profile-auto-activation[Set to false to disable profile auto activation]' \
    '--yaml-only[Only prints the effective skaffold.yaml configuration]' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_fix {
  _arguments \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '--overwrite[Overwrite original config with fixed config]' \
    '--version[Target schema version to upgrade to]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_help {
  _arguments \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_init {
  _arguments \
    '--analyze[Print all discoverable Dockerfiles and images in JSON format to stdout]' \
    '(*-a *--artifact)'{\*-a,\*--artifact}'['\''='\''-delimited Dockerfile/image pair, or JSON string, to generate build artifact
(example: --artifact='\''{"builder":"Docker","payload":{"path":"/web/Dockerfile.web"},"image":"gcr.io/web-project/image"}'\'')]:' \
    '--compose-file[Initialize from a docker-compose file]:' \
    '--default-kustomization[Default Kustomization overlay path (others will be added as profiles)]:' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '--force[Force the generation of the Skaffold config]' \
    '(*-k *--kubernetes-manifest)'{\*-k,\*--kubernetes-manifest}'[A path or a glob pattern to kubernetes manifests (can be non-existent) to be added to the kubectl deployer (overrides detection of kubernetes manifests). Repeat the flag for multiple entries. E.g.: skaffold init -k pod.yaml -k k8s/*.yml]:' \
    '--skip-build[Skip generating build artifacts in Skaffold config]' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_options {
  _arguments \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_render {
  _arguments \
    '--add-skaffold-labels[Add Skaffold-specific labels to rendered manifest. If false, custom labels are still applied. Helpful for GitOps model where Skaffold is not the deployer.]' \
    '(-a --build-artifacts)'{-a,--build-artifacts}'[File containing build result from a previous '\''skaffold build --file-output'\'']:' \
    '(-d --default-repo)'{-d,--default-repo}'[Default repository value (overrides global config)]:' \
    '--digest-source[Set to '\''local'\'' to build images locally and use digests from built images; Set to '\''remote'\'' to resolve the digest of images by tag from the remote registry; Set to '\''none'\'' to use tags directly from the Kubernetes manifests]:' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '(*-l *--label)'{\*-l,\*--label}'[Add custom labels to deployed objects. Set multiple times for multiple labels]:' \
    '--loud[Show the build logs and output]' \
    '(-n --namespace)'{-n,--namespace}'[Run deployments in the specified namespace]:' \
    '--offline[Do not connect to Kubernetes API server for manifest creation and validation. This is helpful when no Kubernetes cluster is available (e.g. GitOps model). No metadata.namespace attribute is injected in this case - the manifest content does not get changed.]' \
    '--output[file to write rendered manifests to]:' \
    '(*-p *--profile)'{\*-p,\*--profile}'[Activate profiles by name (prefixed with `-` to disable a profile)]:' \
    '--profile-auto-activation[Set to false to disable profile auto activation]' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_run {
  _arguments \
    '--cache-artifacts[Set to false to disable default caching of artifacts]' \
    '--cache-file[Specify the location of the cache file (default $HOME/.skaffold/cache)]:' \
    '--cleanup[Delete deployments after dev or debug mode is interrupted]' \
    '(-c --config)'{-c,--config}'[File for global configurations (defaults to $HOME/.skaffold/config)]:' \
    '(-d --default-repo)'{-d,--default-repo}'[Default repository value (overrides global config)]:' \
    '--enable-rpc[Enable gRPC for exposing Skaffold events (true by default for `skaffold dev`)]' \
    '(-f --filename)'{-f,--filename}'[Path or URL to the Skaffold config file]:' \
    '--force[Recreate Kubernetes resources if necessary for deployment, warning: might cause downtime! (true by default for `skaffold dev`)]' \
    '*--insecure-registry[Target registries for built images which are not secure]:' \
    '--kube-context[Deploy to this Kubernetes context]:' \
    '--kubeconfig[Path to the kubeconfig file to use for CLI requests.]:' \
    '(*-l *--label)'{\*-l,\*--label}'[Add custom labels to deployed objects. Set multiple times for multiple labels]:' \
    '(-n --namespace)'{-n,--namespace}'[Run deployments in the specified namespace]:' \
    '--no-prune[Skip removing images and containers built by Skaffold]' \
    '--no-prune-children[Skip removing layers reused by Skaffold]' \
    '--port-forward[Port-forward exposed container ports within pods]' \
    '(*-p *--profile)'{\*-p,\*--profile}'[Activate profiles by name (prefixed with `-` to disable a profile)]:' \
    '--profile-auto-activation[Set to false to disable profile auto activation]' \
    '--render-only[Print rendered Kubernetes manifests instead of deploying them]' \
    '--rpc-http-port[tcp port to expose event REST API over HTTP]:' \
    '--rpc-port[tcp port to expose event API]:' \
    '--skip-tests[Whether to skip the tests after building]' \
    '--status-check[Wait for deployed resources to stabilize]' \
    '(-t --tag)'{-t,--tag}'[The optional custom tag to use for images which overrides the current Tagger configuration]:' \
    '--tail[Stream logs from deployed objects (true by default for `skaffold dev` and `skaffold debug`)]' \
    '--toot[Emit a terminal beep after the deploy is complete]' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}


function _skaffold_schema {
  local -a commands

  _arguments -C \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "get:Print a given skaffold.yaml's json schema"
      "list:List skaffold.yaml's json schema versions"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  get)
    _skaffold_schema_get
    ;;
  list)
    _skaffold_schema_list
    ;;
  esac
}

function _skaffold_schema_get {
  _arguments \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_schema_list {
  _arguments \
    '(-o --output)'{-o,--output}'[Type of output: `plain` or `json`.]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_survey {
  _arguments \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}

function _skaffold_version {
  _arguments \
    '(-o --output)'{-o,--output}'[Format output with go-template. For full struct documentation, see https://godoc.org/github.com/GoogleContainerTools/skaffold/pkg/skaffold/version#Info]:' \
    '--color[Specify the default output color in ANSI escape codes]:' \
    '(-v --verbosity)'{-v,--verbosity}'[Log level (debug, info, warn, error, fatal, panic)]:'
}


compdef _skaffold skaffold
