# Filename:      /etc/skel/.zshrc
# Purpose:       config file for zsh (z shell)
# Authors:       (c) grml-team (grml.org)
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
################################################################################
# Nowadays, grml's zsh setup lives in only *one* zshrc file.
# That is the global one: /etc/zsh/zshrc (from grml-etc-core).
# It is best to leave *this* file untouched and do personal changes to
# your zsh setup via ${HOME}/.zshrc.local which is loaded at the end of
# the global zshrc.
#
# That way, we enable people on other operating systems to use our
# setup, too, just by copying our global zshrc to their ${HOME}/.zshrc.
# Adjustments would still go to the .zshrc.local file.
################################################################################

## Inform users about upgrade path for grml's old zshrc layout, assuming that:
## /etc/skel/.zshrc was installed as ~/.zshrc,
## /etc/zsh/zshrc was installed as ~/.zshrc.global and
## ~/.zshrc.local does not exist yet.
if [ -r ~/.zshrc -a -r ~/.zshrc.global -a ! -r ~/.zshrc.local ] ; then
	printf '-!-\n'
	printf '-!- Looks like you are using the old zshrc layout of grml.\n'
	printf '-!- Please read the notes in the grml-zsh-refcard, being'
	printf '-!- available at: http://grml.org/zsh/\n'
	printf '-!-\n'
	printf '-!- If you just want to get rid of this warning message execute:\n'
	printf '-!-        touch ~/.zshrc.local\n'
	printf '-!-\n'
fi

# Settings for umask
if (( EUID == 0 )); then
	umask 002
else
	umask 022
fi

## Now, we'll give a few examples of what you might want to use in your
## .zshrc.local file (just copy'n'paste and uncomment it there):

source ~/.vi-mode.zsh

## Prompt theme extension ##
# Virtualenv support
function virtual_env_prompt () {
	REPLY=${VIRTUAL_ENV+(${VIRTUAL_ENV:t}) }
}

function python_environment_prompt() {
	if [[ -n "$PYENV_VERSION" ]]; then
	  REPLY="(Python $PYENV_VERSION)"
	elif [ $commands[pyenv] ]; then
		local pyenv_version_name="$(pyenv version-name)"
		local pyenv_global="system"
		local pyenv_root="$(pyenv root)"

		if [[ -f "${pyenv_root}/version" ]]; then
			pyenv_global="$(pyenv version-file-read ${pyenv_root}/version)"
		fi

		if [[ "${pyenv_version_name}" != "${pyenv_global}" ]]; then
			REPLY="(Python ${pyenv_version_name})"
		fi
	fi

}

function vcs_status_prompt () {
	GIT_SH_PROMPT=/usr/share/git-core/contrib/completion/git-prompt.sh

	if [ -f ${GIT_SH_PROMPT} ]; then
		source ${GIT_SH_PROMPT}
		GIT_PS1_SHOWDIRTYSTATE=1
		GIT_PS1_SHOWSTASHSTATE=1
		GIT_PS1_SHOWUNTRACKEDFILES=1
		GIT_PS1_SHOWUPSTREAM="verbose name"
		GIT_PS1_DESCRIBE_STYLE="default"
		GIT_PS1_SHOWCOLORHINTS=1
		REPLY=$(__git_ps1)
	else
		REPLY=""
	fi
}

grml_theme_add_token virtual-env -f virtual_env_prompt '%F{magenta}' '%f'
grml_theme_add_token pyenv -f python_environment_prompt '%F{magenta}' '%f'
grml_theme_add_token vi-mode '%1v' '%F{blue}(' ')%f%k '
grml_theme_add_token vcs-status -f vcs_status_prompt

zstyle ':vcs_info:*' enable git cvs svn bzr darcs
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' check-for-staged-changes true
zstyle ':vcs_info:*' get-revision true
zstyle ':vcs_info:*' stagedstr '%F{green} +%f'
zstyle ':vcs_info:*' unstagedstr '%F{red} +%f'

zstyle ':prompt:grml:*:items:date' token '%D{%Y-%m-%d} '
zstyle ':prompt:grml:*:items:time' token '%D{%H:%M:%S %s} '
zstyle ':prompt:grml:left:setup' items newline vi-mode date time pyenv vcs-status newline rc virtual-env change-root user at host path vcs percent
zstyle ':prompt:grml:right:setup' items battery sad-smiley 

## ZLE tweaks ##

## use the vi navigation keys (hjkl) besides cursor keys in menu completion
bindkey -M menuselect 'h' vi-backward-char        # left
bindkey -M menuselect 'k' vi-up-line-or-history   # up
bindkey -M menuselect 'l' vi-forward-char         # right
bindkey -M menuselect 'j' vi-down-line-or-history # bottom

## set command prediction from history, see 'man 1 zshcontrib'
is4 && zrcautoload predict-on && \
zle -N predict-on         && \
zle -N predict-off        && \
bindkey "^X^Z" predict-on && \
bindkey "^Z" predict-off

# press ctrl-q to quote line:
mquote () {
	zle beginning-of-line
	zle forward-word
	# RBUFFER="'$RBUFFER'"
	RBUFFER=${(q)RBUFFER}
	zle end-of-line
}
zle -N mquote && bindkey '^q' mquote

## define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default
WORDCHARS=.
WORDCHARS='*?_[]~=&;!#$%^(){}'
WORDCHARS='${WORDCHARS:s@/@}'

bindkey '\eq' push-line-or-edit

## some popular options ##

## don't warn me about bg processes when exiting
#setopt nocheckjobs

## alert me if something failed
setopt printexitvalue

## Allow comments even in interactive shells
setopt interactivecomments

## changed completer settings
zstyle ':completion:*' completer _complete _correct _approximate
zstyle ':completion:*' expand prefix suffix

## another different completer setting: expand shell aliases
zstyle ':completion:*' completer _expand_alias _complete _approximate

## the default grml setup provides '..' as a completion. it does not provide
## '.' though. If you want that too, use the following line:
zstyle ':completion:*' special-dirs true

## aliases ##
if [ -f $HOME/.aliases ]; then
	source $HOME/.aliases
fi

## functions ##
if [ -f $HOME/.functions ]; then
	source $HOME/.functions
fi


## translate
alias u='translate -i'

## ignore ~/.ssh/known_hosts entries
alias insecssh='ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -o "PreferredAuthentications=keyboard-interactive"'


## global aliases (for those who like them) ##

alias -g '...'='../..'
alias -g '....'='../../..'
check_com s &>/dev/null || alias s='ssh'
#alias -g BG='& exit'
#alias -g C='|wc -l'
#alias -g G='|grep'
#alias -g H='|head'
#alias -g Hl=' --help |& less -r'
#alias -g K='|keep'
#alias -g L='|less'
#alias -g LL='|& less -r'
#alias -g M='|most'
#alias -g N='&>/dev/null'
#alias -g R='| tr A-z N-za-m'
#alias -g SL='| sort | less'
#alias -g S='| sort'
#alias -g T='|tail'
#alias -g V='| vim -'

## instead of global aliase it might be better to use grmls $abk assoc array, whose contents are expanded after pressing ,.
#$abk[SnL]="| sort -n | less"

## get top 10 shell commands:
alias top10='print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10'

## Execute \kbd{./configure}
#alias CO="./configure"

## Execute \kbd{./configure --help}
#alias CH="./configure --help"

## miscellaneous code ##
fpath=($fpath $HOME/.zshcomp)
autoload -U compinit
compinit
zstyle ':completion:*:default' menu select=1

## Use a default width of 80 for manpages for more convenient reading
export MANWIDTH=${MANWIDTH:-80}

## Set a search path for the cd builtin
cdpath=(.. ~)

## variation of our manzsh() function; pick you poison:
manzsh()  { /usr/bin/man zshall |  most +/"$1" ; }

## Switching shell safely and efficiently? http://www.zsh.org/mla/workers/2001/msg02410.html
bash() {
	NO_SWITCH="yes" command bash "$@"
}
restart () {
	exec $SHELL $SHELL_ARGS "$@"
}

## Memory overview
memusage() {
	ps aux | awk '{if (NR > 1) print $5;
				   if (NR > 2) print "+"}
				   END { print "p" }' | dc
}

## print hex value of a number
hex() {
	emulate -L zsh
	if [[ -n "$1" ]]; then
		printf "%x\n" $1
	else
		print 'Usage: hex <number-to-convert>'
		return 1
	fi
}

## log out? set timeout in seconds...
## ...and do not log out in some specific terminals:
if [[ "${TERM}" == ([Exa]term*|rxvt|dtterm|screen*) ]] ; then
	unset TMOUT
else
	TMOUT=1800
fi

## associate types and extensions (be aware with perl scripts and anwanted behaviour!)
check_com zsh-mime-setup || { autoload zsh-mime-setup && zsh-mime-setup }
alias -s pl='perl -S'

## Some quick Perl-hacks aka /useful/ oneliner
bew() { perl -le 'print unpack "B*","'$1'"' }
web() { perl -le 'print pack "B*","'$1'"' }
hew() { perl -le 'print unpack "H*","'$1'"' }
weh() { perl -le 'print pack "H*","'$1'"' }
pversion()    { perl -M$1 -le "print $1->VERSION" } # i. e."pversion LWP -> 5.79"
getlinks ()   { perl -ne 'while ( m/"((www|ftp|http):\/\/.*?)"/gc ) { print $1, "\n"; }' $* }
gethrefs ()   { perl -ne 'while ( m/href="([^"]*)"/gc ) { print $1, "\n"; }' $* }
getanames ()  { perl -ne 'while ( m/a name="([^"]*)"/gc ) { print $1, "\n"; }' $* }
getforms ()   { perl -ne 'while ( m:(\</?(input|form|select|option).*?\>):gic ) { print $1, "\n"; }' $* }
getstrings () { perl -ne 'while ( m/"(.*?)"/gc ) { print $1, "\n"; }' $*}
getanchors () { perl -ne 'while ( m/«([^«»\n]+)»/gc ) { print $1, "\n"; }' $* }
showINC ()    { perl -e 'for (@INC) { printf "%d %s\n", $i++, $_ }' }
vimpm ()      { vim `perldoc -l $1 | sed -e 's/pod$/pm/'` }
vimhelp ()    { vim -c "help $1" -c on -c "au! VimEnter *" }

## disable some grml zshrc features
unsetopt share_history
unsetopt append_history

bindkey -v
bindkey '^E' edit-command-line
bindkey "^H" run-help

bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line
bindkey "\e[5~" history-beginning-search-backward
bindkey "\e[6~" history-beginning-search-forward
bindkey "\e[3~" delete-char
bindkey "\e[2~" quoted-insert
bindkey "\e[5C" forward-word
bindkey "\e[5D" backward-word
bindkey "\e[1;5C" forward-word
bindkey "\e[1;5D" backward-word

# for rxvt
bindkey "\e[8~" end-of-line
bindkey "\eOc" forward-word
bindkey "\eOd" backward-word

# for non RH/Debian xterm, can't hurt for RH/DEbian xterm
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line

# for freebsd console
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line

## END OF FILE #################################################################
